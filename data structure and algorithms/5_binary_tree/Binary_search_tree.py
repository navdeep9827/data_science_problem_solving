# -*- coding: utf-8 -*-
"""Copy of LE5_BST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5XPhE2PRACYQRBsJAnx2qMWGfCv-97O
"""

class BST_Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.key = key


    # Insert method to create nodes
    def insert(self, key):
        if key < self.key:
            if self.left is None:
                self.left = BST_Node(key)
            else:
                self.left.insert(key)
        else:
            if self.right is None:
                self.right = BST_Node(key)
            else:
                self.right.insert(key)


    # Delete method to delete nodes based on key
    def delete(self, key):
        if key < self.key:
            if self.left:
                self.left = self.left.delete(key)
        elif key > self.key:
            if self.right:
                self.right = self.right.delete(key)
        else:
            if not self.left:
                return self.right
            if not self.right:
                return self.left
            min_val = self.right.min_val()
            self.key = min_val
            self.right = self.right.delete(min_val)
        return self


    # Find and return the min value from the tree
    def min_val(self):
        if self.left:
            return self.left.min_val()
        return self.key


    # Find and return the max value from the tree
    def max_val(self):
        if self.right:
            return self.right.max_val()
        return self.key


    # Find method to compare the value with nodes
    def find(self, lkpkey):
        if lkpkey == self.key:
            return True
        if lkpkey < self.key and self.left:
            return self.left.find(lkpkey)
        if lkpkey > self.key and self.right:
            return self.right.find(lkpkey)
        return False


    # Print the tree in order
    def PrintTree(self):
        if self.left:
            self.left.PrintTree()
        print(self.key)
        if self.right:
            self.right.PrintTree()



# Create a root node
root = BST_Node(50)

# Insert elements into the tree
root.insert(30)
root.insert(70)
root.insert(20)
root.insert(40)
root.insert(60)
root.insert(80)

# Print the tree in order to verify the structure
print("In-order traversal of the tree:")
root.PrintTree()
# Output should be: 20, 30, 40, 50, 60, 70, 80

# Test the find method
print("Search for values in the tree:")
print(root.find(30))  # Should print True
print(root.find(45))  # Should print False

# Test the min_val and max_val methods
print("Minimum and maximum values in the tree:")
print(root.min_val())  # Should print 20
print(root.max_val())  # Should print 80

# Delete some elements and print the tree to verify
root = root.delete(30)
root = root.delete(80)
root = root.delete(50)

print("In-order traversal after deleting some nodes:")
root.PrintTree()
# Output should be: 20, 40, 60, 70


if __name__ == "__main__":
    import random
    # Test code for million point insertion

    random.seed(100)
    root = BST_Node(1)
    for i in random.sample(range(-1000000, 1000000), 1000000):
        root.insert(i)